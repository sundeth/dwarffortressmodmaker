/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.dwarfmod.dwarffortressmodmaker.gui.creation;

import br.com.dwarfmod.dwarffortressmodmaker.core.ModManager;
import br.com.dwarfmod.dwarffortressmodmaker.data.Mod;
import br.com.dwarfmod.dwarffortressmodmaker.data.RawFile;
import br.com.dwarfmod.dwarffortressmodmaker.data.RawFileTypeEnum;
import br.com.dwarfmod.dwarffortressmodmaker.data.RawObject;
import br.com.dwarfmod.dwarffortressmodmaker.gui.MainWindow;
import br.com.dwarfmod.dwarffortressmodmaker.gui.creation.CreateRawFilePanel;
import br.com.dwarfmod.dwarffortressmodmaker.utils.StringLibrary;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.TreeSet;
import javax.swing.JOptionPane;

/**
 *
 * @author Ander
 */
public class RawFileCreatorWindow extends javax.swing.JFrame {

    private final MainWindow mainWindow;
    private final ModManager manager;
    private RawFile rawFile;
    private CREATE_MODE mode;
    
    private boolean success;
    
    final CreateRawFilePanel createPanel = new CreateRawFilePanel();
    private Mod mod;
    private RawObject rawObject;

    /**
     * Creates new form RawFileCreatorWindow
     */
    public RawFileCreatorWindow(final MainWindow mainWindow, final ModManager manager) {
        this.mainWindow = mainWindow;
        this.manager = manager;
        this.success = false;
        
        this.initComponents();
        this.centerScreen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        creationTabPane = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Creation Window");
        setSize(new java.awt.Dimension(400, 300));
        setType(java.awt.Window.Type.UTILITY);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(creationTabPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(creationTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.saveData();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane creationTabPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables

    public void setRawFile(final Mod mod, final RawFile raw, final RawObject obj, final CREATE_MODE mode) {
        this.mod = mod;
        this.rawFile = raw;
        this.rawObject = obj;
        this.mode = mode;
        this.success = false;
        this.updateView();
    }

    private void updateView() {
        if (this.mode == CREATE_MODE.NEW_RAW_FILE) {
            this.creationTabPane.removeAll();
            this.creationTabPane.add("RawFile", this.createPanel);
            this.createPanel.fillClassCombo();
        } else if (this.mode == CREATE_MODE.EDIT_RAW_FILE) {
            this.creationTabPane.removeAll();
            this.creationTabPane.add("RawFile", this.createPanel);
            this.createPanel.fillClassCombo();
            
            this.createPanel.setRawDescription(this.rawFile.getDescription());
            this.createPanel.setRawName(this.rawFile.getName());
            this.createPanel.setRawType(this.rawFile.getType());
            
            this.createPanel.setRawTypeEditable(this.rawFile.getEntries().isEmpty());
        }
        
        this.setSize(400, 300);
        this.centerScreen();
    }
    
    private void centerScreen() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        // Calculate the center position of the frame
        int centerX = (int) ((screenSize.getWidth() - this.getWidth()) / 2);
        int centerY = (int) ((screenSize.getHeight() - this.getHeight()) / 2);
        // Set the position of the frame to the center
        this.setLocation(centerX, centerY);
    }

    private void saveData() {
        if (this.validateFields()) {
            if (this.mode == CREATE_MODE.NEW_RAW_FILE || this.mode == CREATE_MODE.EDIT_RAW_FILE) {
                final String rawName = this.createPanel.getRawName().replace(" ", "_").toLowerCase().trim();
                this.rawFile.setDescription(this.createPanel.getRawDescription());
                this.rawFile.setName(rawName);
                this.rawFile.setType(this.createPanel.getRawType());
                this.rawFile.setEntries(new TreeSet<>());
                
                if (this.mode == CREATE_MODE.NEW_RAW_FILE) {
                    if (this.rawFile.getType() == RawFileTypeEnum.GRAPHICS || this.rawFile.getType() == RawFileTypeEnum.TILE_PAGE) {
                        this.mod.getGraphics().add(this.rawFile);
                    } else {
                        this.mod.getObjects().add(this.rawFile);
                    }
                }
                this.success = true;
            }
        }
        
        this.setVisible(false);
        this.mainWindow.updateCreation(this.mode, this.success);
    }

    private boolean validateFields() {
        boolean result = true;
        if (this.mode == CREATE_MODE.NEW_RAW_FILE) {
            final String rawName = this.createPanel.getRawName().replace(" ", "_").toLowerCase().trim();
            if (rawName.isEmpty()) {
                result = false;
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_RAW_FILE_EMPTY_ID, StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            } else if (this.mod.getObjects().stream().anyMatch(x -> x.getName().equals(rawName)) || this.mod.getGraphics().stream().anyMatch(x -> x.getName().equals(rawName))) {
                result = false;
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_RAW_FILE_EMPTY_DUPLICATED, StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
        
        return result;
    }

    public boolean isSuccess() {
        return success;
    }

    public Mod getMod() {
        return this.mod;
    }
    
    public enum CREATE_MODE {
        NEW_RAW_FILE, EDIT_RAW_FILE;
    }
}
