/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package br.com.dwarfmod.dwarffortressmodmaker.gui.library;

import br.com.dwarfmod.dwarffortressmodmaker.core.ModManager;
import br.com.dwarfmod.dwarffortressmodmaker.core.ResourcesReader;
import br.com.dwarfmod.dwarffortressmodmaker.data.library.Occurrence;
import br.com.dwarfmod.dwarffortressmodmaker.data.library.OccurrenceLibrary;
import br.com.dwarfmod.dwarffortressmodmaker.gui.MainWindow;
import java.util.Arrays;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Ander
 */
public class OccurrenceLibraryWindow extends javax.swing.JFrame {

    private final MainWindow mainWindow;
    private final ModManager manager;
    private OccurrenceLibrary library;

    /**
     * Creates new form OcurrenceLibraryWindow
     */
    public OccurrenceLibraryWindow(final MainWindow mainWindow, final ModManager manager) {
        this.mainWindow = mainWindow;
        this.manager = manager;

        this.initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        occurrenceTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        occurrenceList = new javax.swing.JList<>();

        setTitle("Ocurrence Library");
        setIconImage(ResourcesReader.getInstance().getIcons().get("icon_ocu").getImage());

        jLabel1.setText("Search");

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        jButton1.setText("Search");

        occurrenceTree.setBorder(javax.swing.BorderFactory.createTitledBorder("Tokens"));
        occurrenceTree.setModel(null);
        occurrenceTree.setRootVisible(false);
        occurrenceTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                occurrenceTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(occurrenceTree);

        occurrenceList.setBorder(javax.swing.BorderFactory.createTitledBorder("Ocurrences"));
        occurrenceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(occurrenceList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void occurrenceTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_occurrenceTreeValueChanged
        final Occurrence selected = this.occurrenceTree.getLastSelectedPathComponent() != null
                ? (((DefaultMutableTreeNode) this.occurrenceTree.getLastSelectedPathComponent()).getUserObject() instanceof Occurrence ?
                (Occurrence) ((DefaultMutableTreeNode) this.occurrenceTree.getLastSelectedPathComponent()).getUserObject() : null) : null;
        if (selected != null) {
            this.occurrenceList.setListData(selected.getValues().toArray(String[]::new));
        }
    }//GEN-LAST:event_occurrenceTreeValueChanged

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped
        this.selectNodesWithText(searchTextField.getText(), true);
    }//GEN-LAST:event_searchTextFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> occurrenceList;
    private javax.swing.JTree occurrenceTree;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    public OccurrenceLibrary getLibrary() {
        return library;
    }

    public void refreshLibrary() {
        this.library = this.manager.getOccurrenceLibrary();
        this.occurrenceTree.setModel(new OccurrenceLibraryTreeModel(this.library));
    }

    public void navigateTo(final String text) {
        this.searchTextField.setText(text);
        this.selectNodesWithText(text, false);
    }
        
    public void selectNodesWithText(String text, boolean contains) {
        if (!this.isVisible()) {
            return;
        }
        // Collapse the entire tree
        this.collapseAll();

        // Get the root node of the tree
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) this.occurrenceTree.getModel().getRoot();

        // Traverse the tree and expand and select the nodes that contain the given text
        selectNodesWithTextHelper(rootNode, text, contains);
        
        //this.scrollToSelectedNode();
    }

    private void selectNodesWithTextHelper(DefaultMutableTreeNode node, String text, boolean contains) {
        // Check if the node contains the given text
        if ((!contains &&node.getUserObject().toString().equalsIgnoreCase(text)) || (contains &&node.getUserObject().toString().contains(text))) {
            // Select the node
            this.occurrenceTree.setSelectionPath(new TreePath(node.getPath()));
            this.occurrenceTree.scrollPathToVisible(new TreePath(node.getPath()));

            // Expand the node and its ancestors
            TreeNode[] ancestors = node.getPath();
            for (int i = 1; i < ancestors.length; i++) {
                this.occurrenceTree.expandPath(new TreePath(Arrays.copyOfRange(ancestors, 0, i + 1)));
            }
        }

        // Traverse the node's children recursively
        for (int i = 0; i < node.getChildCount(); i++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            selectNodesWithTextHelper(childNode, text, contains);
        }
    }

    public void scrollToSelectedNode() {
        // Get the selection path of the first selected node
        TreePath selectedPath = this.occurrenceTree.getSelectionPath();

        if (selectedPath != null) {
            // Scroll the tree to the selected node
            this.occurrenceTree.scrollPathToVisible(selectedPath);
        }
    }
    
    private void collapseAll() {
        for (int i = this.occurrenceTree.getRowCount() - 1; i >= 0; i--) {
            occurrenceTree.collapseRow(i);
        }
    }
}
