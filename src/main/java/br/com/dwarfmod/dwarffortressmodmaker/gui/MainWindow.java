/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.dwarfmod.dwarffortressmodmaker.gui;

import br.com.dwarfmod.dwarffortressmodmaker.gui.library.OccurrenceLibraryWindow;
import br.com.dwarfmod.dwarffortressmodmaker.gui.library.TokenLibraryWindow;
import br.com.dwarfmod.dwarffortressmodmaker.core.ModManager;
import br.com.dwarfmod.dwarffortressmodmaker.core.ModWritter;
import br.com.dwarfmod.dwarffortressmodmaker.core.ResourcesReader;
import br.com.dwarfmod.dwarffortressmodmaker.data.Mod;
import br.com.dwarfmod.dwarffortressmodmaker.data.ModType;
import br.com.dwarfmod.dwarffortressmodmaker.utils.Constants;
import br.com.dwarfmod.dwarffortressmodmaker.utils.StringLibrary;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.TreeSet;
import java.util.stream.Stream;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Ander
 */
public class MainWindow extends javax.swing.JFrame {

    private final ModManager manager;

    private Mod selectedMod;
    
    private final TokenLibraryWindow tokenLibrary;
    private final OccurrenceLibraryWindow occurrenceLibrary;
    
    /**
     * Creates new form MainWindow
     * @param manager
     */
    public MainWindow(final ModManager manager) {
        this.tokenLibrary = new TokenLibraryWindow(this, manager);
        this.occurrenceLibrary = new OccurrenceLibraryWindow(this, manager);
        
        this.manager = manager;
        this.manager.initialize();
        
        this.initComponents();
        this.centerScreen();
        
        this.fillModList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftMainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        modList = new javax.swing.JList<>();
        newModJButton = new javax.swing.JButton();
        deleteModJButton = new javax.swing.JButton();
        rightMainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        modEditButton = new javax.swing.JButton();
        modDescriptionLabel = new javax.swing.JLabel();
        modAuthorLabel = new javax.swing.JLabel();
        modVersionLabel = new javax.swing.JLabel();
        modIdLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        modRawTree = new br.com.dwarfmod.dwarffortressmodmaker.gui.ModRawTree();
        jToolBar1 = new javax.swing.JToolBar();
        addRawButton = new javax.swing.JButton();
        editRawButton = new javax.swing.JButton();
        deleteRawButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        copyRawButton = new javax.swing.JButton();
        pasteRawButton = new javax.swing.JButton();
        modSaveButton = new javax.swing.JButton();
        modUndoButton = new javax.swing.JButton();
        modUpdateLocalButton = new javax.swing.JButton();
        modPublishButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(StringLibrary.APP_NAME + " - " + Constants.VERSION);
        setIconImage(ResourcesReader.getInstance().getIcons().get("icon").getImage());
        setResizable(false);

        leftMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mod List"));

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(800, 559));

        modList.setModel(modList.getModel());
        modList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        modList.setMaximumSize(new java.awt.Dimension(45, 559));
        modList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                modListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(modList);

        newModJButton.setText("New");
        newModJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newModJButtonActionPerformed(evt);
            }
        });

        deleteModJButton.setText("Delete");
        deleteModJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteModJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftMainPanelLayout = new javax.swing.GroupLayout(leftMainPanel);
        leftMainPanel.setLayout(leftMainPanelLayout);
        leftMainPanelLayout.setHorizontalGroup(
            leftMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftMainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftMainPanelLayout.createSequentialGroup()
                        .addComponent(deleteModJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newModJButton)))
                .addContainerGap())
        );
        leftMainPanelLayout.setVerticalGroup(
            leftMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(leftMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newModJButton)
                    .addComponent(deleteModJButton))
                .addContainerGap())
        );

        rightMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mod Data"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mod Info"));

        jLabel1.setText("ID:");

        jLabel2.setText("Version");

        jLabel3.setText("Author:");

        jLabel4.setText("Description:");

        modEditButton.setText("Edit");
        modEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modEditButtonActionPerformed(evt);
            }
        });

        modDescriptionLabel.setText("_");
        modDescriptionLabel.setToolTipText("");
        modDescriptionLabel.setMaximumSize(new java.awt.Dimension(221, 16));
        modDescriptionLabel.setMinimumSize(new java.awt.Dimension(221, 16));

        modAuthorLabel.setText("_");

        modVersionLabel.setText("_");

        modIdLabel.setText("_");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modAuthorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modVersionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(modIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(modVersionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(modAuthorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(modDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(modEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Raw Files"));

        jToolBar1.setRollover(true);

        addRawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/icon_new.png"))); // NOI18N
        addRawButton.setBorder(null);
        addRawButton.setFocusable(false);
        addRawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addRawButton.setMaximumSize(new java.awt.Dimension(20, 20));
        addRawButton.setMinimumSize(new java.awt.Dimension(20, 20));
        addRawButton.setPreferredSize(new java.awt.Dimension(20, 20));
        addRawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(addRawButton);

        editRawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/icon_edit.png"))); // NOI18N
        editRawButton.setBorder(null);
        editRawButton.setFocusable(false);
        editRawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editRawButton.setMaximumSize(new java.awt.Dimension(20, 20));
        editRawButton.setMinimumSize(new java.awt.Dimension(20, 20));
        editRawButton.setPreferredSize(new java.awt.Dimension(20, 20));
        editRawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(editRawButton);

        deleteRawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/icon_delete.png"))); // NOI18N
        deleteRawButton.setBorder(null);
        deleteRawButton.setFocusable(false);
        deleteRawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteRawButton.setMaximumSize(new java.awt.Dimension(20, 20));
        deleteRawButton.setMinimumSize(new java.awt.Dimension(20, 20));
        deleteRawButton.setPreferredSize(new java.awt.Dimension(20, 20));
        deleteRawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(deleteRawButton);
        jToolBar1.add(jSeparator1);

        copyRawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/icon_copy.png"))); // NOI18N
        copyRawButton.setBorder(null);
        copyRawButton.setFocusable(false);
        copyRawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyRawButton.setMaximumSize(new java.awt.Dimension(20, 20));
        copyRawButton.setMinimumSize(new java.awt.Dimension(20, 20));
        copyRawButton.setPreferredSize(new java.awt.Dimension(20, 20));
        copyRawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(copyRawButton);

        pasteRawButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/icon_paste.png"))); // NOI18N
        pasteRawButton.setBorder(null);
        pasteRawButton.setFocusable(false);
        pasteRawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteRawButton.setMaximumSize(new java.awt.Dimension(20, 20));
        pasteRawButton.setMinimumSize(new java.awt.Dimension(20, 20));
        pasteRawButton.setPreferredSize(new java.awt.Dimension(20, 20));
        pasteRawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(pasteRawButton);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(modRawTree, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modRawTree, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
        );

        modSaveButton.setText("Save");
        modSaveButton.setEnabled(false);
        modSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modSaveButtonActionPerformed(evt);
            }
        });

        modUndoButton.setText("Undo Changes");
        modUndoButton.setEnabled(false);
        modUndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modUndoButtonActionPerformed(evt);
            }
        });

        modUpdateLocalButton.setText("Update Local");
        modUpdateLocalButton.setEnabled(false);
        modUpdateLocalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modUpdateLocalButtonActionPerformed(evt);
            }
        });

        modPublishButton.setText("Publish");
        modPublishButton.setEnabled(false);
        modPublishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modPublishButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightMainPanelLayout = new javax.swing.GroupLayout(rightMainPanel);
        rightMainPanel.setLayout(rightMainPanelLayout);
        rightMainPanelLayout.setHorizontalGroup(
            rightMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightMainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(modPublishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modUpdateLocalButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modUndoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modSaveButton)))
                .addContainerGap())
        );
        rightMainPanelLayout.setVerticalGroup(
            rightMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rightMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modSaveButton)
                    .addComponent(modUndoButton)
                    .addComponent(modUpdateLocalButton)
                    .addComponent(modPublishButton))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Undo Changes");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Update Local");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Publish");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Library");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setText("Occurrence Library");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Token Library");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("Update Token Library");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_modListValueChanged
        if (evt != null) {
            this.selectedMod = this.modList.getSelectedValue();
        }
        this.updateSelectedMod();
    }//GEN-LAST:event_modListValueChanged

    private void newModJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newModJButtonActionPerformed
        this.createNewMod();
    }//GEN-LAST:event_newModJButtonActionPerformed

    private void deleteModJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteModJButtonActionPerformed
        this.deleteMod();
    }//GEN-LAST:event_deleteModJButtonActionPerformed

    private void modEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modEditButtonActionPerformed
        this.editMod();
    }//GEN-LAST:event_modEditButtonActionPerformed

    private void modSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modSaveButtonActionPerformed
        this.saveModToFile();
    }//GEN-LAST:event_modSaveButtonActionPerformed

    private void modUndoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modUndoButtonActionPerformed
        this.resetCurrentMod();
    }//GEN-LAST:event_modUndoButtonActionPerformed

    private void modUpdateLocalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modUpdateLocalButtonActionPerformed
        this.updateLocalFiles();
    }//GEN-LAST:event_modUpdateLocalButtonActionPerformed

    private void modPublishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modPublishButtonActionPerformed
        this.publishModToSteam();
    }//GEN-LAST:event_modPublishButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (this.selectedMod != null && this.selectedMod.getType() == ModType.MODMAKER) {
            this.updateLocalFiles();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (this.selectedMod != null && this.selectedMod.getType() == ModType.MODMAKER) {
            this.saveModToFile();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (this.selectedMod != null && this.selectedMod.getType() == ModType.MODMAKER) {
            this.resetCurrentMod();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (this.selectedMod != null && this.selectedMod.getType() == ModType.MODMAKER) {
            this.publishModToSteam();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.openTokenLibrary();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        this.updateTokenLibrary();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        this.openOcurrenceLibrary();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRawButton;
    private javax.swing.JButton copyRawButton;
    private javax.swing.JButton deleteModJButton;
    private javax.swing.JButton deleteRawButton;
    private javax.swing.JButton editRawButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel leftMainPanel;
    private javax.swing.JLabel modAuthorLabel;
    private javax.swing.JLabel modDescriptionLabel;
    private javax.swing.JButton modEditButton;
    private javax.swing.JLabel modIdLabel;
    private javax.swing.JList<Mod> modList;
    private javax.swing.JButton modPublishButton;
    private br.com.dwarfmod.dwarffortressmodmaker.gui.ModRawTree modRawTree;
    private javax.swing.JButton modSaveButton;
    private javax.swing.JButton modUndoButton;
    private javax.swing.JButton modUpdateLocalButton;
    private javax.swing.JLabel modVersionLabel;
    private javax.swing.JButton newModJButton;
    private javax.swing.JButton pasteRawButton;
    private javax.swing.JPanel rightMainPanel;
    // End of variables declaration//GEN-END:variables

    //***********************************************************************************************************************************************************************
    // Window General Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Center the current JFrame on the user screen
    //***********************************************************************************************************************************************************************
    private void centerScreen() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        // Calculate the center position of the frame
        int centerX = (int) ((screenSize.getWidth() - this.getWidth()) / 2);
        int centerY = (int) ((screenSize.getHeight() - this.getHeight()) / 2);
        // Set the position of the frame to the center
        this.setLocation(centerX, centerY);
    }
    
    //***********************************************************************************************************************************************************************
    // Mod List
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Fills the modJList with the avaliable mods 
    //***********************************************************************************************************************************************************************
    private void fillModList() {
        this.modList.setListData(this.manager.getModList().toArray(Mod[]::new));
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Refresh 
    //***********************************************************************************************************************************************************************
    private void updateSelectedMod() {
        if (this.selectedMod != null) {
            this.modIdLabel.setText(this.selectedMod.getId() != null ? this.selectedMod.getId() : "");
            this.modVersionLabel.setText(this.selectedMod.getDisplayedVersion() != null ? this.selectedMod.getDisplayedVersion() : "");
            this.modAuthorLabel.setText(this.selectedMod.getAuthor() != null ? this.selectedMod.getAuthor() : "");
            this.modDescriptionLabel.setText(this.selectedMod.getDescription() != null ? this.selectedMod.getDescription() : "");

            this.enableEdit(this.selectedMod.getType() == ModType.MODMAKER);
        } else {
            this.modIdLabel.setText("");
            this.modVersionLabel.setText("");
            this.modAuthorLabel.setText("");
            this.modDescriptionLabel.setText("");
            
            this.enableEdit(false);
        }
        this.updateTree();
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Add New
    //***********************************************************************************************************************************************************************
    private void createNewMod() {
        String name = JOptionPane.showInputDialog(this, StringLibrary.MAIN_NEW_MOD_INPUT, "");

        if (name == null || name.isEmpty()) {
            return;
        }
        name = name.replace(" ", "_").toLowerCase();
        final Mod mod = Mod.builder()
                .name("My New Mod")
                .author("Your Name")
                .description("This is a new mod")
                .displayedVersion("1.0")
                .earliestCompatibleDisplayedVersion("50.00")
                .earliestCompatibleNumericVersion("5000")
                .id(name)
                .steamTitle("My New Mod")
                .numericVersion("1.0")
                .requiresIdBeforeMe(new TreeSet<>())
                .steamTags(new TreeSet<>())
                .steamChangelog("")
                .steamFileId("")
                .modPath(this.manager.getPath() + Constants.MODS_FOLDER + "//" + name)
                .type(ModType.MODMAKER)
                .build();

        try {
            Files.createDirectories(new File(mod.getModPath()).toPath());
            Files.createFile(new File(mod.getModPath() + "//" + Constants.MOD_MAKER_FILE).toPath());
            Files.writeString(new File(mod.getModPath() + "//" + Constants.MOD_MAKER_FILE).toPath(), Constants.MOD_MAKER_GREETINGS + Constants.MOD_MAKER_VERSION);

            ModWritter.writeInfo(this.manager, mod);

            this.manager.getModList().add(mod);
            this.fillModList();
            this.selectedMod = mod;
            this.modList.setSelectedValue(mod, true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, StringLibrary.MAIN_ERROR_SAVE_MODINFO + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
        }
    }

    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Delete
    //***********************************************************************************************************************************************************************
    private void deleteMod() {
        if (this.selectedMod == null) {
            return;
        }
        if (this.selectedMod.getType() != ModType.MODMAKER) {
            JOptionPane.showMessageDialog(null, StringLibrary.MAIN_CANNOT_REMOVE, StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(this, StringLibrary.MAIN_CONFIRM_REMOVE, StringLibrary.GENERAL_CONFIRMATION, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try {
                try (Stream<Path> walk = Files.walk(new File(this.selectedMod.getModPath()).toPath())) {
                    walk.sorted(Comparator.reverseOrder())
                            .map(Path::toFile)
                            .peek(System.out::println)
                            .forEach(File::delete);
                }

                this.manager.getModList().remove(this.selectedMod);
                this.modList.setListData(this.manager.getModList().toArray(Mod[]::new));
                this.selectedMod = Mod.builder().build();
                this.updateSelectedMod();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_REMOVE_ERROR + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Edit
    //***********************************************************************************************************************************************************************
    private void editMod() {
        if (this.selectedMod == null) {
            return;
        }
        final ModInfoEditDialog editWindow = new ModInfoEditDialog(this, true, this.selectedMod, this.manager);
        editWindow.setVisible(true);
        
        final Mod mod = this.selectedMod;
        this.fillModList();
        this.modList.setSelectedValue(mod, true);
        //this.updateSelectedMod();
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Set if mod edit will ne enabled 
    //***********************************************************************************************************************************************************************
    private void enableEdit(boolean enabled) {
        this.modEditButton.setText(enabled ? "Edit" : "View");
        
        this.modSaveButton.setEnabled(enabled);
        this.modUndoButton.setEnabled(enabled);
        this.modUpdateLocalButton.setEnabled(enabled);
        this.modPublishButton.setEnabled(enabled);
        
        this.addRawButton.setEnabled(enabled);
        this.editRawButton.setEnabled(enabled);
        this.deleteRawButton.setEnabled(enabled);
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Save the mod contents on all tabs to file
    //***********************************************************************************************************************************************************************
    private void saveModToFile() {
        if (this.selectedMod != null) {
            try {
                ModWritter.writeInfo(this.manager, this.selectedMod);
                //ModWritter.writeEntity(this.manager, this.selectedMod); TODO
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_SAVE_SUCCESS, StringLibrary.GENERAL_SUCCESS, JOptionPane.PLAIN_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_ERROR_SAVE_DATA + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //***********************************************************************************************************************************************************************
    // Mod Button Methods
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Restore mod from saved data
    //***********************************************************************************************************************************************************************
    private void resetCurrentMod() {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to undo all changes on this tab?", "Confirmation", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            //TODO
        }
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Update Local
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Updates the local installed files
    //***********************************************************************************************************************************************************************
    private void updateLocalFiles() {
        if (JOptionPane.showConfirmDialog(this, StringLibrary.MAIN_LOCAL_UPDATE_CONFIRMATION, StringLibrary.GENERAL_CONFIRMATION, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            final Mod mod = this.selectedMod;

            if (mod != null && mod.getType() == ModType.MODMAKER) {
                try {
                    final File current = new File(mod.getModPath());
                    final File target = new File(this.manager.getPath() + Constants.LOCAL_MODS_FOLDER + "//" + mod.getId() + " (" + mod.getNumericVersion() + ")");
                    if (target.exists()) {
                        FileUtils.deleteDirectory(target);
                    }
                    FileUtils.copyDirectory(current, target);

                    JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LOCAL_UPDATE_SUCESS, StringLibrary.GENERAL_SUCCESS, JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LOCAL_UPDATE_ERROR + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LOCAL_UPDATE_BAD_MOD, StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    //***********************************************************************************************************************************************************************
    // Mod Publish
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Publish mod to steam
    //***********************************************************************************************************************************************************************
    private void publishModToSteam() {
        if (JOptionPane.showConfirmDialog(this, StringLibrary.MAIN_PUBLISH_CONFIRMATION, StringLibrary.GENERAL_CONFIRMATION, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            final Mod mod = this.selectedMod;

            if (mod != null && mod.getType() == ModType.MODMAKER) {
                try {
                    final File current = new File(mod.getModPath());
                    final File target = new File(this.manager.getPath() + Constants.STEAM_FOLDER + "//" + (mod.getSteamFileId().isEmpty() ? mod.getId() : mod.getSteamFileId()) + " (" + mod.getNumericVersion() + ")");
                    if (target.exists()) {
                        FileUtils.deleteDirectory(target);
                    }
                    FileUtils.copyDirectory(current, target);

                    JOptionPane.showMessageDialog(null, StringLibrary.MAIN_PUBLISH_SUCESS, StringLibrary.GENERAL_SUCCESS, JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LOCAL_UPDATE_ERROR + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
                }

                //FileUtils.deleteDirectory(this.dfInstallation.getPath() + );
            } else {
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LOCAL_UPDATE_BAD_MOD, StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //***********************************************************************************************************************************************************************
    // Mod Raws
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * list raw values for currently selected mod
    //***********************************************************************************************************************************************************************
    private void updateTree() {
        if (this.selectedMod != null) {
            this.modRawTree.getTree().setModel(new ModRawTreeModel(this.selectedMod));
        } else {
            this.modRawTree.getTree().setModel(null);
        }
    }

    //***********************************************************************************************************************************************************************
    // Token Library
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Rebuild the current token library
    //***********************************************************************************************************************************************************************
    private void updateTokenLibrary() {
        if (JOptionPane.showConfirmDialog(this, StringLibrary.MAIN_LIBRARY_UPDATE, StringLibrary.GENERAL_CONFIRMATION, JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try {
                this.manager.updateTokenLibrary();
                this.tokenLibrary.fillClassCombo();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, StringLibrary.MAIN_LIBRARY_ERROR + "\n" + e.getMessage(), StringLibrary.GENERAL_ERROR, JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //***********************************************************************************************************************************************************************
    // Token Library
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Open token library window
    //***********************************************************************************************************************************************************************
    private void openTokenLibrary() {
        this.tokenLibrary.setVisible(true);
        this.tokenLibrary.setLocation(this.getLocationOnScreen().x + this.getWidth(), this.getLocationOnScreen().y);
        this.tokenLibrary.setSize(this.tokenLibrary.getWidth(), this.getHeight());
    }

    //***********************************************************************************************************************************************************************
    // Ocurrence Library
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // * Open Ocurrence library window
    //***********************************************************************************************************************************************************************
    private void openOcurrenceLibrary() {
        if (this.occurrenceLibrary.getLibrary() == null) {
            this.occurrenceLibrary.refreshLibrary();
        }
        this.occurrenceLibrary.setVisible(true);
        this.occurrenceLibrary.setLocation(this.getLocationOnScreen().x - this.occurrenceLibrary.getWidth(), this.getLocationOnScreen().y);
        this.occurrenceLibrary.setSize(this.occurrenceLibrary.getWidth(), this.getHeight());
    }
}
